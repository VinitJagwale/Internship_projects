
// Generated by Cadence Genus(TM) Synthesis Solution 17.22-s017_1
// Generated on: Nov 30 2023 13:10:32 IST (Nov 30 2023 07:40:32 UTC)

// Verification Directory fv/fifo 

module add_unsigned(A, B, Z);
  input [2:0] A;
  input B;
  output [2:0] Z;
  wire [2:0] A;
  wire B;
  wire [2:0] Z;
  wire n_9, n_15, n_18, n_20, n_24, n_25;
  xor g1 (Z[0], A[0], B);
  nand g2 (n_9, A[0], B);
  nand g11 (n_18, n_15, A[1]);
  xnor g17 (Z[1], n_15, n_24);
  xnor g19 (Z[2], n_20, n_25);
  not g23 (n_15, n_9);
  not g24 (n_24, A[1]);
  not g25 (n_25, A[2]);
  not g26 (n_20, n_18);
endmodule

module bmux(ctl, in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7, z);
  input [2:0] ctl;
  input [7:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  output [7:0] z;
  wire [2:0] ctl;
  wire [7:0] in_0, in_1, in_2, in_3, in_4, in_5, in_6, in_7;
  wire [7:0] z;
  CDN_bmux8 g1(.sel0 (ctl[0]), .data0 (in_0[7]), .data1 (in_1[7]),
       .sel1 (ctl[1]), .data2 (in_2[7]), .data3 (in_3[7]), .sel2
       (ctl[2]), .data4 (in_4[7]), .data5 (in_5[7]), .data6 (in_6[7]),
       .data7 (in_7[7]), .z (z[7]));
  CDN_bmux8 g2(.sel0 (ctl[0]), .data0 (in_0[6]), .data1 (in_1[6]),
       .sel1 (ctl[1]), .data2 (in_2[6]), .data3 (in_3[6]), .sel2
       (ctl[2]), .data4 (in_4[6]), .data5 (in_5[6]), .data6 (in_6[6]),
       .data7 (in_7[6]), .z (z[6]));
  CDN_bmux8 g3(.sel0 (ctl[0]), .data0 (in_0[5]), .data1 (in_1[5]),
       .sel1 (ctl[1]), .data2 (in_2[5]), .data3 (in_3[5]), .sel2
       (ctl[2]), .data4 (in_4[5]), .data5 (in_5[5]), .data6 (in_6[5]),
       .data7 (in_7[5]), .z (z[5]));
  CDN_bmux8 g4(.sel0 (ctl[0]), .data0 (in_0[4]), .data1 (in_1[4]),
       .sel1 (ctl[1]), .data2 (in_2[4]), .data3 (in_3[4]), .sel2
       (ctl[2]), .data4 (in_4[4]), .data5 (in_5[4]), .data6 (in_6[4]),
       .data7 (in_7[4]), .z (z[4]));
  CDN_bmux8 g5(.sel0 (ctl[0]), .data0 (in_0[3]), .data1 (in_1[3]),
       .sel1 (ctl[1]), .data2 (in_2[3]), .data3 (in_3[3]), .sel2
       (ctl[2]), .data4 (in_4[3]), .data5 (in_5[3]), .data6 (in_6[3]),
       .data7 (in_7[3]), .z (z[3]));
  CDN_bmux8 g6(.sel0 (ctl[0]), .data0 (in_0[2]), .data1 (in_1[2]),
       .sel1 (ctl[1]), .data2 (in_2[2]), .data3 (in_3[2]), .sel2
       (ctl[2]), .data4 (in_4[2]), .data5 (in_5[2]), .data6 (in_6[2]),
       .data7 (in_7[2]), .z (z[2]));
  CDN_bmux8 g7(.sel0 (ctl[0]), .data0 (in_0[1]), .data1 (in_1[1]),
       .sel1 (ctl[1]), .data2 (in_2[1]), .data3 (in_3[1]), .sel2
       (ctl[2]), .data4 (in_4[1]), .data5 (in_5[1]), .data6 (in_6[1]),
       .data7 (in_7[1]), .z (z[1]));
  CDN_bmux8 g8(.sel0 (ctl[0]), .data0 (in_0[0]), .data1 (in_1[0]),
       .sel1 (ctl[1]), .data2 (in_2[0]), .data3 (in_3[0]), .sel2
       (ctl[2]), .data4 (in_4[0]), .data5 (in_5[0]), .data6 (in_6[0]),
       .data7 (in_7[0]), .z (z[0]));
endmodule

module fifo(w_clk, r_clk, rst, w_en, r_en, data_in, full_flag,
     empty_flag, data_out);
  input w_clk, r_clk, rst, w_en, r_en;
  input [7:0] data_in;
  output full_flag, empty_flag;
  output [7:0] data_out;
  wire w_clk, r_clk, rst, w_en, r_en;
  wire [7:0] data_in;
  wire full_flag, empty_flag;
  wire [7:0] data_out;
  wire [2:0] w_ptr;
  wire [2:0] r_ptr;
  wire [7:0] \memo[0] ;
  wire [7:0] \memo[1] ;
  wire [7:0] \memo[2] ;
  wire [7:0] \memo[3] ;
  wire [7:0] \memo[4] ;
  wire [7:0] \memo[5] ;
  wire [7:0] \memo[6] ;
  wire [7:0] \memo[7] ;
  wire [7:0] \memo[r_ptr] ;
  wire n_19, n_20, n_32, n_34, n_36, n_38, n_40, n_42;
  wire n_44, n_46, n_48, n_49, n_50, n_51, n_54, n_56;
  wire n_57, n_58, n_63, n_64, n_65, n_300, n_301, n_302;
  wire n_304, n_305, n_306;
  add_unsigned add_36_27(.A (w_ptr), .B (1'b1), .Z ({n_51, n_50,
       n_49}));
  add_unsigned add_32_21(.A (r_ptr), .B (1'b1), .Z ({n_58, n_57,
       n_56}));
  bmux \mux_memo[r_ptr]_31_13 (.ctl (r_ptr), .in_0 ({\memo[0] [7],
       \memo[0] [6], \memo[0] [5], \memo[0] [4], \memo[0] [3],
       \memo[0] [2], \memo[0] [1], \memo[0] [0]}), .in_1 ({\memo[1]
       [7], \memo[1] [6], \memo[1] [5], \memo[1] [4], \memo[1] [3],
       \memo[1] [2], \memo[1] [1], \memo[1] [0]}), .in_2 ({\memo[2]
       [7], \memo[2] [6], \memo[2] [5], \memo[2] [4], \memo[2] [3],
       \memo[2] [2], \memo[2] [1], \memo[2] [0]}), .in_3 ({\memo[3]
       [7], \memo[3] [6], \memo[3] [5], \memo[3] [4], \memo[3] [3],
       \memo[3] [2], \memo[3] [1], \memo[3] [0]}), .in_4 ({\memo[4]
       [7], \memo[4] [6], \memo[4] [5], \memo[4] [4], \memo[4] [3],
       \memo[4] [2], \memo[4] [1], \memo[4] [0]}), .in_5 ({\memo[5]
       [7], \memo[5] [6], \memo[5] [5], \memo[5] [4], \memo[5] [3],
       \memo[5] [2], \memo[5] [1], \memo[5] [0]}), .in_6 ({\memo[6]
       [7], \memo[6] [6], \memo[6] [5], \memo[6] [4], \memo[6] [3],
       \memo[6] [2], \memo[6] [1], \memo[6] [0]}), .in_7 ({\memo[7]
       [7], \memo[7] [6], \memo[7] [5], \memo[7] [4], \memo[7] [3],
       \memo[7] [2], \memo[7] [1], \memo[7] [0]}), .z ({\memo[r_ptr]
       [7], \memo[r_ptr] [6], \memo[r_ptr] [5], \memo[r_ptr] [4],
       \memo[r_ptr] [3], \memo[r_ptr] [2], \memo[r_ptr] [1],
       \memo[r_ptr] [0]}));
  and g5 (n_19, w_en, n_32);
  and g16 (n_20, r_en, n_54);
  not g49 (n_63, w_ptr[2]);
  not g50 (n_64, w_ptr[1]);
  not g51 (n_65, w_ptr[0]);
  CDN_flop \data_out_reg[0] (.clk (w_clk), .d (1'b0), .sena (1'b0),
       .aclr (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q
       (data_out[0]));
  CDN_flop \data_out_reg[1] (.clk (w_clk), .d (1'b0), .sena (1'b0),
       .aclr (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q
       (data_out[1]));
  CDN_flop \data_out_reg[2] (.clk (w_clk), .d (1'b0), .sena (1'b0),
       .aclr (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q
       (data_out[2]));
  CDN_flop \data_out_reg[3] (.clk (w_clk), .d (1'b0), .sena (1'b0),
       .aclr (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q
       (data_out[3]));
  CDN_flop \data_out_reg[4] (.clk (w_clk), .d (1'b0), .sena (1'b0),
       .aclr (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q
       (data_out[4]));
  CDN_flop \data_out_reg[5] (.clk (w_clk), .d (1'b0), .sena (1'b0),
       .aclr (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q
       (data_out[5]));
  CDN_flop \data_out_reg[6] (.clk (w_clk), .d (1'b0), .sena (1'b0),
       .aclr (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q
       (data_out[6]));
  CDN_flop \data_out_reg[7] (.clk (w_clk), .d (1'b0), .sena (1'b0),
       .aclr (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q
       (data_out[7]));
  CDN_flop \w_ptr_reg[0] (.clk (w_clk), .d (1'b0), .sena (1'b0), .aclr
       (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q (w_ptr[0]));
  CDN_flop \w_ptr_reg[1] (.clk (w_clk), .d (1'b0), .sena (1'b0), .aclr
       (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q (w_ptr[1]));
  CDN_flop \w_ptr_reg[2] (.clk (w_clk), .d (1'b0), .sena (1'b0), .aclr
       (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q (w_ptr[2]));
  CDN_flop \r_ptr_reg[0] (.clk (w_clk), .d (1'b0), .sena (1'b0), .aclr
       (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q (r_ptr[0]));
  CDN_flop \r_ptr_reg[1] (.clk (w_clk), .d (1'b0), .sena (1'b0), .aclr
       (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q (r_ptr[1]));
  CDN_flop \r_ptr_reg[2] (.clk (w_clk), .d (1'b0), .sena (1'b0), .aclr
       (1'b0), .apre (1'b0), .srl (rst), .srd (1'b0), .q (r_ptr[2]));
  CDN_flop \memo_reg[0][0] (.clk (w_clk), .d (data_in[0]), .sena
       (n_34), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[0] [0]));
  CDN_flop \memo_reg[0][1] (.clk (w_clk), .d (data_in[1]), .sena
       (n_34), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[0] [1]));
  CDN_flop \memo_reg[0][2] (.clk (w_clk), .d (data_in[2]), .sena
       (n_34), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[0] [2]));
  CDN_flop \memo_reg[0][3] (.clk (w_clk), .d (data_in[3]), .sena
       (n_34), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[0] [3]));
  CDN_flop \memo_reg[0][4] (.clk (w_clk), .d (data_in[4]), .sena
       (n_34), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[0] [4]));
  CDN_flop \memo_reg[0][5] (.clk (w_clk), .d (data_in[5]), .sena
       (n_34), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[0] [5]));
  CDN_flop \memo_reg[0][6] (.clk (w_clk), .d (data_in[6]), .sena
       (n_34), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[0] [6]));
  CDN_flop \memo_reg[0][7] (.clk (w_clk), .d (data_in[7]), .sena
       (n_34), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[0] [7]));
  CDN_flop \memo_reg[1][0] (.clk (w_clk), .d (data_in[0]), .sena
       (n_36), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[1] [0]));
  CDN_flop \memo_reg[1][1] (.clk (w_clk), .d (data_in[1]), .sena
       (n_36), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[1] [1]));
  CDN_flop \memo_reg[1][2] (.clk (w_clk), .d (data_in[2]), .sena
       (n_36), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[1] [2]));
  CDN_flop \memo_reg[1][3] (.clk (w_clk), .d (data_in[3]), .sena
       (n_36), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[1] [3]));
  CDN_flop \memo_reg[1][4] (.clk (w_clk), .d (data_in[4]), .sena
       (n_36), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[1] [4]));
  CDN_flop \memo_reg[1][5] (.clk (w_clk), .d (data_in[5]), .sena
       (n_36), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[1] [5]));
  CDN_flop \memo_reg[1][6] (.clk (w_clk), .d (data_in[6]), .sena
       (n_36), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[1] [6]));
  CDN_flop \memo_reg[1][7] (.clk (w_clk), .d (data_in[7]), .sena
       (n_36), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[1] [7]));
  CDN_flop \memo_reg[2][0] (.clk (w_clk), .d (data_in[0]), .sena
       (n_38), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[2] [0]));
  CDN_flop \memo_reg[2][1] (.clk (w_clk), .d (data_in[1]), .sena
       (n_38), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[2] [1]));
  CDN_flop \memo_reg[2][2] (.clk (w_clk), .d (data_in[2]), .sena
       (n_38), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[2] [2]));
  CDN_flop \memo_reg[2][3] (.clk (w_clk), .d (data_in[3]), .sena
       (n_38), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[2] [3]));
  CDN_flop \memo_reg[2][4] (.clk (w_clk), .d (data_in[4]), .sena
       (n_38), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[2] [4]));
  CDN_flop \memo_reg[2][5] (.clk (w_clk), .d (data_in[5]), .sena
       (n_38), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[2] [5]));
  CDN_flop \memo_reg[2][6] (.clk (w_clk), .d (data_in[6]), .sena
       (n_38), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[2] [6]));
  CDN_flop \memo_reg[2][7] (.clk (w_clk), .d (data_in[7]), .sena
       (n_38), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[2] [7]));
  CDN_flop \memo_reg[3][0] (.clk (w_clk), .d (data_in[0]), .sena
       (n_40), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[3] [0]));
  CDN_flop \memo_reg[3][1] (.clk (w_clk), .d (data_in[1]), .sena
       (n_40), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[3] [1]));
  CDN_flop \memo_reg[3][2] (.clk (w_clk), .d (data_in[2]), .sena
       (n_40), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[3] [2]));
  CDN_flop \memo_reg[3][3] (.clk (w_clk), .d (data_in[3]), .sena
       (n_40), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[3] [3]));
  CDN_flop \memo_reg[3][4] (.clk (w_clk), .d (data_in[4]), .sena
       (n_40), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[3] [4]));
  CDN_flop \memo_reg[3][5] (.clk (w_clk), .d (data_in[5]), .sena
       (n_40), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[3] [5]));
  CDN_flop \memo_reg[3][6] (.clk (w_clk), .d (data_in[6]), .sena
       (n_40), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[3] [6]));
  CDN_flop \memo_reg[3][7] (.clk (w_clk), .d (data_in[7]), .sena
       (n_40), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[3] [7]));
  CDN_flop \memo_reg[4][0] (.clk (w_clk), .d (data_in[0]), .sena
       (n_42), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[4] [0]));
  CDN_flop \memo_reg[4][1] (.clk (w_clk), .d (data_in[1]), .sena
       (n_42), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[4] [1]));
  CDN_flop \memo_reg[4][2] (.clk (w_clk), .d (data_in[2]), .sena
       (n_42), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[4] [2]));
  CDN_flop \memo_reg[4][3] (.clk (w_clk), .d (data_in[3]), .sena
       (n_42), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[4] [3]));
  CDN_flop \memo_reg[4][4] (.clk (w_clk), .d (data_in[4]), .sena
       (n_42), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[4] [4]));
  CDN_flop \memo_reg[4][5] (.clk (w_clk), .d (data_in[5]), .sena
       (n_42), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[4] [5]));
  CDN_flop \memo_reg[4][6] (.clk (w_clk), .d (data_in[6]), .sena
       (n_42), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[4] [6]));
  CDN_flop \memo_reg[4][7] (.clk (w_clk), .d (data_in[7]), .sena
       (n_42), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[4] [7]));
  CDN_flop \memo_reg[5][0] (.clk (w_clk), .d (data_in[0]), .sena
       (n_44), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[5] [0]));
  CDN_flop \memo_reg[5][1] (.clk (w_clk), .d (data_in[1]), .sena
       (n_44), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[5] [1]));
  CDN_flop \memo_reg[5][2] (.clk (w_clk), .d (data_in[2]), .sena
       (n_44), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[5] [2]));
  CDN_flop \memo_reg[5][3] (.clk (w_clk), .d (data_in[3]), .sena
       (n_44), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[5] [3]));
  CDN_flop \memo_reg[5][4] (.clk (w_clk), .d (data_in[4]), .sena
       (n_44), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[5] [4]));
  CDN_flop \memo_reg[5][5] (.clk (w_clk), .d (data_in[5]), .sena
       (n_44), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[5] [5]));
  CDN_flop \memo_reg[5][6] (.clk (w_clk), .d (data_in[6]), .sena
       (n_44), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[5] [6]));
  CDN_flop \memo_reg[5][7] (.clk (w_clk), .d (data_in[7]), .sena
       (n_44), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[5] [7]));
  CDN_flop \memo_reg[6][0] (.clk (w_clk), .d (data_in[0]), .sena
       (n_46), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[6] [0]));
  CDN_flop \memo_reg[6][1] (.clk (w_clk), .d (data_in[1]), .sena
       (n_46), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[6] [1]));
  CDN_flop \memo_reg[6][2] (.clk (w_clk), .d (data_in[2]), .sena
       (n_46), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[6] [2]));
  CDN_flop \memo_reg[6][3] (.clk (w_clk), .d (data_in[3]), .sena
       (n_46), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[6] [3]));
  CDN_flop \memo_reg[6][4] (.clk (w_clk), .d (data_in[4]), .sena
       (n_46), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[6] [4]));
  CDN_flop \memo_reg[6][5] (.clk (w_clk), .d (data_in[5]), .sena
       (n_46), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[6] [5]));
  CDN_flop \memo_reg[6][6] (.clk (w_clk), .d (data_in[6]), .sena
       (n_46), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[6] [6]));
  CDN_flop \memo_reg[6][7] (.clk (w_clk), .d (data_in[7]), .sena
       (n_46), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[6] [7]));
  CDN_flop \memo_reg[7][0] (.clk (w_clk), .d (data_in[0]), .sena
       (n_48), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[7] [0]));
  CDN_flop \memo_reg[7][1] (.clk (w_clk), .d (data_in[1]), .sena
       (n_48), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[7] [1]));
  CDN_flop \memo_reg[7][2] (.clk (w_clk), .d (data_in[2]), .sena
       (n_48), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[7] [2]));
  CDN_flop \memo_reg[7][3] (.clk (w_clk), .d (data_in[3]), .sena
       (n_48), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[7] [3]));
  CDN_flop \memo_reg[7][4] (.clk (w_clk), .d (data_in[4]), .sena
       (n_48), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[7] [4]));
  CDN_flop \memo_reg[7][5] (.clk (w_clk), .d (data_in[5]), .sena
       (n_48), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[7] [5]));
  CDN_flop \memo_reg[7][6] (.clk (w_clk), .d (data_in[6]), .sena
       (n_48), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[7] [6]));
  CDN_flop \memo_reg[7][7] (.clk (w_clk), .d (data_in[7]), .sena
       (n_48), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (\memo[7] [7]));
  CDN_flop \w_ptr_reg[0]138 (.clk (w_clk), .d (n_49), .sena (n_19),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (w_ptr[0]));
  CDN_flop \w_ptr_reg[1]139 (.clk (w_clk), .d (n_50), .sena (n_19),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (w_ptr[1]));
  CDN_flop \w_ptr_reg[2]140 (.clk (w_clk), .d (n_51), .sena (n_19),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (w_ptr[2]));
  CDN_flop \data_out_reg[0]145 (.clk (r_clk), .d (\memo[r_ptr] [0]),
       .sena (n_20), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (data_out[0]));
  CDN_flop \data_out_reg[1]146 (.clk (r_clk), .d (\memo[r_ptr] [1]),
       .sena (n_20), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (data_out[1]));
  CDN_flop \data_out_reg[2]147 (.clk (r_clk), .d (\memo[r_ptr] [2]),
       .sena (n_20), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (data_out[2]));
  CDN_flop \data_out_reg[3]148 (.clk (r_clk), .d (\memo[r_ptr] [3]),
       .sena (n_20), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (data_out[3]));
  CDN_flop \data_out_reg[4]149 (.clk (r_clk), .d (\memo[r_ptr] [4]),
       .sena (n_20), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (data_out[4]));
  CDN_flop \data_out_reg[5]150 (.clk (r_clk), .d (\memo[r_ptr] [5]),
       .sena (n_20), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (data_out[5]));
  CDN_flop \data_out_reg[6]151 (.clk (r_clk), .d (\memo[r_ptr] [6]),
       .sena (n_20), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (data_out[6]));
  CDN_flop \data_out_reg[7]152 (.clk (r_clk), .d (\memo[r_ptr] [7]),
       .sena (n_20), .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd
       (1'b0), .q (data_out[7]));
  CDN_flop \r_ptr_reg[0]161 (.clk (r_clk), .d (n_56), .sena (n_20),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (r_ptr[0]));
  CDN_flop \r_ptr_reg[1]162 (.clk (r_clk), .d (n_57), .sena (n_20),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (r_ptr[1]));
  CDN_flop \r_ptr_reg[2]163 (.clk (r_clk), .d (n_58), .sena (n_20),
       .aclr (1'b0), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q
       (r_ptr[2]));
  xnor g168 (n_300, n_49, r_ptr[0]);
  xnor g169 (n_301, n_50, r_ptr[1]);
  xnor g170 (n_302, n_51, r_ptr[2]);
  nand g171 (n_32, n_300, n_301, n_302);
  not g172 (full_flag, n_32);
  xnor g173 (n_304, w_ptr[0], r_ptr[0]);
  xnor g174 (n_305, w_ptr[1], r_ptr[1]);
  xnor g175 (n_306, w_ptr[2], r_ptr[2]);
  nand g176 (n_54, n_304, n_305, n_306);
  not g177 (empty_flag, n_54);
  and g178 (n_34, n_63, n_64, n_65, n_19);
  and g179 (n_36, n_63, n_64, w_ptr[0], n_19);
  and g180 (n_38, n_63, w_ptr[1], n_65, n_19);
  and g181 (n_40, n_63, w_ptr[1], w_ptr[0], n_19);
  and g182 (n_42, w_ptr[2], n_64, n_65, n_19);
  and g183 (n_44, w_ptr[2], n_64, w_ptr[0], n_19);
  and g184 (n_46, w_ptr[2], w_ptr[1], n_65, n_19);
  and g185 (n_48, w_ptr[2], w_ptr[1], w_ptr[0], n_19);
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
`ifdef RC_CDN_GENERIC_GATE
`else
`ifdef ONE_HOT_MUX
module CDN_bmux8(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  reg  z;
  always 
    @(sel0 or sel1 or sel2 or data0 or data1 or data2 or data3 or data4
         or data5 or data6 or data7) 
      case ({sel0, sel1, sel2})
       3'b000: z = data0;
       3'b100: z = data1;
       3'b010: z = data2;
       3'b110: z = data3;
       3'b001: z = data4;
       3'b101: z = data5;
       3'b011: z = data6;
       3'b111: z = data7;
      endcase
endmodule
`else
module CDN_bmux8(sel0, data0, data1, sel1, data2, data3, sel2, data4,
     data5, data6, data7, z);
  input sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  output z;
  wire sel0, data0, data1, sel1, data2, data3, sel2, data4, data5,
       data6, data7;
  wire z;
  wire inv_sel0, inv_sel1, inv_sel2, w_0, w_1, w_2, w_3, w_4;
  wire w_5, w_6, w_7;
  not i_0 (inv_sel0, sel0);
  not i_1 (inv_sel1, sel1);
  not i_2 (inv_sel2, sel2);
  and a_0 (w_0, inv_sel2, inv_sel1, inv_sel0, data0);
  and a_1 (w_1, inv_sel2, inv_sel1, sel0, data1);
  and a_2 (w_2, inv_sel2, sel1, inv_sel0, data2);
  and a_3 (w_3, inv_sel2, sel1, sel0, data3);
  and a_4 (w_4, sel2, inv_sel1, inv_sel0, data4);
  and a_5 (w_5, sel2, inv_sel1, sel0, data5);
  and a_6 (w_6, sel2, sel1, inv_sel0, data6);
  and a_7 (w_7, sel2, sel1, sel0, data7);
  or org (z, w_0, w_1, w_2, w_3, w_4, w_5, w_6, w_7);
endmodule
`endif // ONE_HOT_MUX
`endif
